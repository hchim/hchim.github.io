---
layout: post
categories: Leetcode
---

Given an array of non-negative integers, you are initially positioned at the first 
index of the array. Each element in the array represents your maximum jump length 
at that position. Determine if you are able to reach the last index. For example:

```
A = [2,3,1,1,4], return true.
A = [3,2,1,0,4], return false.
```

#### Analysis

A straight forward method tries all the possibilities recursively. For example,

A = [2,3,1,1,4]

At position 0, we will try whether we can jump to the end from the sub arrays:

A1[3, 1, 1, 4] and A2[1, 1, 4]

Following this example, we can implement a recursive solution. However, when we 
check whether we can jump to the end from a position i, some computations are 
duplicated. So, we can use DP method to store the solution for the subproblems.

```java
public boolean canJump(int[] A) {
    if(A == null || A.length == 0) 
        return true;
        
    int len = A.length - 1;
    //table[i] means whether we can jump to the 
    //last position from position i
    //-1: false 1:true
    
    //  int[] table = new int[A.length];
    //  table[A.length - 1] = 1;
    // the closest position that can jump to the end
    int closest = len;
    for(int i = len - 1; i >= 0; i--){
        // check whether we can jump to the closest position or not
        if(i + A[i] >= closest){ 
    //      table[i] = 1;
            closest = i;
        }
    }
    return closest == 0;
}
```

### Jump Game II

Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element 
in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum 
number of jumps. For example:

Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

#### Analysis

Use a table to record the minimum steps to jump to the end from i. Then, at position i we check the 
following positions that we could jump to from i, and find out the minimum jump steps from i. 

For example,

```
A = [2,3,1,1,4]
i = 4 , min_jump = 0
i = 3, min_jump = 1
i = 2, min_jump = min_jump[3] + 1 = 2
i = 1, min_jump = 1+ min(min_jump[2], min_jump[3], min_jump[4]) = 1
i = 0, min_jump = 1+ min(min_jump[1], min_jump[2])=2
```

The complexity is O(n^2) in the worse case. Can we optimize it?
The answer is yes. 

At position i, we have k choices (that can jump to the end) to make the next step. Other than try 
each step, we select the position that could jump to the max position. We can prove this by contradiction.

At position i, the next jump position j guarantees to jump to the max position.

Assume exist m, such that m + A[m] < j + A[j] and minJump(m) < minJump(j). 

However 1 + minJump(m + A[m]) >= 1 + minJump(j + A[j]) because j + A[j] is on the right off m + A[m].
So, minJump(m) >= minJump(j) contradicts with the assumption. This proves the greedy method works.

```java
    public int jumpGreedy(int[] A) {
        if(A == null || A.length <= 1) return 0;
        int i = 0, steps = 1, max, maxPos;
        while(A[i] + i < A.length - 1){
            //at position i, find the available positions
            //that guarantees the max jump
            max = 0; maxPos = 0;
            for(int k = i + 1; k<= A[i] + i; k++){
                int tmp = A[k] + k;
                if(tmp >= A.length - 1)
                    return steps + 1;
                else if(tmp >= max){
                    max = A[k] + k;
                    maxPos = k;
                }
            }
        //cannot move forward
            if(max == 0) return -1;
            //jump to next position
            i = maxPos;
            steps++;
        }
        return steps;
    }
```



